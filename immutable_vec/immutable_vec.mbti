package moonbitlang/core/immutable_vec

alias @moonbitlang/core/vec as @vec

// Values
fn array_blit[T](Array[T], Array[T], Int, Int, Int) -> Unit

fn immutable_copy[T](Array[T]) -> Array[T]

fn immutable_push[T](Array[T], T) -> Array[T]

fn immutable_set[T](Array[T], Int, T) -> Array[T]

fn is_empty[T](ImmutableVec[T]) -> Bool

fn length[T](ImmutableVec[T]) -> Int

// Types and methods
type ImmutableVec
fn ImmutableVec::copy[T](ImmutableVec[T]) -> ImmutableVec[T]
fn ImmutableVec::debug_write[T : Debug](ImmutableVec[T], Buffer) -> Unit
fn ImmutableVec::empty[T]() -> ImmutableVec[T]
fn ImmutableVec::fold_left[T](ImmutableVec[T], (T, T) -> T, T) -> T
fn ImmutableVec::fold_right[T](ImmutableVec[T], (T, T) -> T, T) -> T
fn ImmutableVec::from_array[T](Array[T]) -> ImmutableVec[T]
fn ImmutableVec::from_vector[T](@vec.Vec[T]) -> ImmutableVec[T]
fn ImmutableVec::iter[T](ImmutableVec[T], (T) -> Unit) -> Unit
fn ImmutableVec::iteri[T](ImmutableVec[T], (Int, T) -> Unit) -> Unit
fn ImmutableVec::map[T, U](ImmutableVec[T], (T) -> U) -> ImmutableVec[U]
fn ImmutableVec::new[T](Int, T) -> ImmutableVec[T]
fn ImmutableVec::new_with_index[T](Int, (Int) -> T) -> ImmutableVec[T]
fn ImmutableVec::op_equal[T : Eq](ImmutableVec[T], ImmutableVec[T]) -> Bool
fn ImmutableVec::op_get[T](ImmutableVec[T], Int) -> T
fn ImmutableVec::push[T](ImmutableVec[T], T) -> ImmutableVec[T]
fn ImmutableVec::set[T](ImmutableVec[T], Int, T) -> ImmutableVec[T]
fn ImmutableVec::to_string[T : Show](ImmutableVec[T]) -> String

type Tree
fn Tree::debug_write[T : Debug](Tree[T], Buffer) -> Unit
fn Tree::empty[T]() -> Tree[T]
fn Tree::op_equal[T : Eq](Tree[T], Tree[T]) -> Bool

// Traits

// Extension Methods

