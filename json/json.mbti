package moonbitlang/core/json

alias @moonbitlang/core/map as @map
alias @moonbitlang/core/vec as @vec

// Values

// Types and methods
pub enum JsonValue {
  Null
  Boolean(Bool)
  Number(Double)
  String(String)
  Array(@vec.Vec[JsonValue])
  Object(@map.Map[String, JsonValue])
}
fn JsonValue::debug_write(JsonValue, Buffer) -> Unit
fn JsonValue::get_as_array(JsonValue) -> Option[@vec.Vec[JsonValue]]
fn JsonValue::get_as_bool(JsonValue) -> Option[Bool]
fn JsonValue::get_as_null(JsonValue) -> Option[Unit]
fn JsonValue::get_as_number(JsonValue) -> Option[Double]
fn JsonValue::get_as_object(JsonValue) -> Option[@map.Map[String, JsonValue]]
fn JsonValue::get_as_string(JsonValue) -> Option[String]
fn JsonValue::get_item_as_array(JsonValue, Int) -> Option[@vec.Vec[JsonValue]]
fn JsonValue::get_item_as_bool(JsonValue, Int) -> Option[Bool]
fn JsonValue::get_item_as_null(JsonValue, Int) -> Option[Unit]
fn JsonValue::get_item_as_number(JsonValue, Int) -> Option[Double]
fn JsonValue::get_item_as_object(JsonValue, Int) -> Option[@map.Map[String, JsonValue]]
fn JsonValue::get_item_as_string(JsonValue, Int) -> Option[String]
fn JsonValue::get_value_as_array(JsonValue, String) -> Option[@vec.Vec[JsonValue]]
fn JsonValue::get_value_as_bool(JsonValue, String) -> Option[Bool]
fn JsonValue::get_value_as_null(JsonValue, String) -> Option[Unit]
fn JsonValue::get_value_as_number(JsonValue, String) -> Option[Double]
fn JsonValue::get_value_as_object(JsonValue, String) -> Option[@map.Map[String, JsonValue]]
fn JsonValue::get_value_as_string(JsonValue, String) -> Option[String]
fn JsonValue::op_equal(JsonValue, JsonValue) -> Bool
fn JsonValue::to_string(JsonValue) -> String

// Traits

// Extension Methods

