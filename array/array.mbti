package moonbitlang/core/array

alias @moonbitlang/core/iter as @iter

// Values
fn new_with_index[T](Int, (Int) -> T) -> Array[T]

// Types and methods
impl Array {
  as_iter[T](Self[T]) -> @iter.Iter[T]
  blit_to[A](Self[A], Self[A], ~len : Int, ~src_offset : Int = .., ~dst_offset : Int = ..) -> Unit
  copy[T](Self[T]) -> Self[T]
  sort[T : Compare + Eq](Self[T]) -> Unit
  sort_by[T](Self[T], (T, T) -> Int) -> Unit
  sort_by_key[T, K : Compare + Eq](Self[T], (T) -> K) -> Unit
}
impl ArrayView {
  reverse[T](Self[T]) -> Unit
}

// Traits

// Extension Methods

