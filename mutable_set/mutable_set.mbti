package moonbitlang/core/mutable_set

// Values

// Types and methods
type MutableSet
fn MutableSet::add[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], T) -> Unit
fn MutableSet::contains[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], T) -> Bool
fn MutableSet::debug_write[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Debug + @moonbitlang/core/builtin.Eq](MutableSet[T], @moonbitlang/core/builtin.Buffer) -> Unit
fn MutableSet::deep_clone[T](MutableSet[T]) -> MutableSet[T]
fn MutableSet::diff[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], MutableSet[T]) -> MutableSet[T]
fn MutableSet::disjoint[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], MutableSet[T]) -> Bool
fn MutableSet::filter[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], (T) -> Bool) -> MutableSet[T]
fn MutableSet::from_array[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](Array[T]) -> MutableSet[T]
fn MutableSet::from_list[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](List[T]) -> MutableSet[T]
fn MutableSet::from_vec[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](@moonbitlang/core/vec.Vec[T]) -> MutableSet[T]
fn MutableSet::intersect[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], MutableSet[T]) -> MutableSet[T]
fn MutableSet::is_empty[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T]) -> Bool
fn MutableSet::iter[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], (T) -> Unit) -> Unit
fn MutableSet::new[T]() -> MutableSet[T]
fn MutableSet::op_equal[T : @moonbitlang/core/builtin.Eq](MutableSet[T], MutableSet[T]) -> Bool
fn MutableSet::remove[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], T) -> Unit
fn MutableSet::singleton[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](T) -> MutableSet[T]
fn MutableSet::size[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T]) -> Int64
fn MutableSet::subset[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], MutableSet[T]) -> Bool
fn MutableSet::to_array[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T]) -> Array[T]
fn MutableSet::to_list[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T]) -> List[T]
fn MutableSet::to_string[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Show + @moonbitlang/core/builtin.Eq](MutableSet[T]) -> String
fn MutableSet::to_vec[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T]) -> @moonbitlang/core/vec.Vec[T]
fn MutableSet::union[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](MutableSet[T], MutableSet[T]) -> MutableSet[T]

// Traits

// Extension Methods

